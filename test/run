#!/usr/bin/env python3
#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.


import logging
import pathlib
import re
import subprocess
import sys


def run_cmd(cmd):
    try:
        subprocess.run([str(c) for c in cmd], check=True)
    except subprocess.CalledProcessError:
        logging.error("Failed to run command '%s'", " ".join(cmd))
        sys.exit(1)


def litani_add(litani, *args, **kwargs):
    cmd = [litani, "add-job"]
    for arg in args:
        switch = re.sub("_", "-", arg)
        cmd.append(f"--{switch}")
    for arg, value in kwargs.items():
        switch = re.sub("_", "-", arg)
        cmd.append(f"--{switch}")
        if isinstance(value, list):
            cmd.extend(value)
        else:
            cmd.append(value)
    run_cmd(cmd)


def add_unit_tests(litani, test_dir, root_dir):
    for fyle in (test_dir / "unit").iterdir():
        if fyle.name in ["__init__.py", "__pycache__"]:
            continue
        litani_add(
            litani,
            command=f"python3 -m unittest test.unit.{fyle.stem}",
            pipeline="Unit tests",
            ci_stage="test",
            description=fyle.stem,
            cwd=root_dir)


def main():
    logging.basicConfig(format="run-tests: %(message)s")
    test_dir = pathlib.Path(__file__).resolve().parent
    root = test_dir.parent
    litani = root / "litani"

    run_cmd([
        litani, "init",
        "--project", "Litani Test Suite",
        "--output-prefix", test_dir / "output",
        "--output-symlink", test_dir / "output" / "latest"])

    add_unit_tests(litani, test_dir, root)

    run_cmd([litani, "run-build"])


if __name__ == "__main__":
    main()
