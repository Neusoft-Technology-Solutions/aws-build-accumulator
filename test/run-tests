#!/usr/bin/env python3
#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.


import datetime
import logging
import os
import pathlib
import subprocess
import sys
import uuid


def run_test(test, timestamp, results):

    (test / "logs").mkdir(exist_ok=True)

    proc = subprocess.Popen(
        ["./litani-test.sh"], cwd=test, stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT, text=True)
    stdout, _ = proc.communicate()
    log_file = (test / "logs" / ("%s.txt" % timestamp)).resolve()
    with open(log_file, "w") as handle:
        print(stdout, file=handle)
    tmp_link = test / "logs" / ("latest-%s" % uuid.uuid4())
    os.symlink(log_file, tmp_link)
    os.rename(tmp_link, test / "logs" / "latest")
    if proc.returncode:
        results["fail"].append(test)
    else:
        results["pass"].append(test)


def main():
    logging.basicConfig(
        level=logging.INFO, format="litani-test: %(message)s")

    try:
        import voluptuous
        voluptuous.Schema({})({})   # shut the linter up
    except ImportError:
        logging.error(
            "The 'voluptuous' module is required for validating test "
            "results; please install it using pip or your system package "
            "manager.")
        sys.exit(1)

    results = {
        "pass": [],
        "fail": [],
    }

    stamp = datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")

    for test in os.listdir("tests"):
        run_test(pathlib.Path("tests") / test, stamp, results)

    for result, tests in results.items():
        for test in tests:
            print("%s %s" % (result.upper(), test))
    print("%d/%d tests passed" % (
        len(results["pass"]), len(results["pass"]) + len(results["fail"])
    ))

    sys.exit(1 if results["fail"] else 0)


if __name__ == "__main__":
    main()
