#!/usr/bin/env python3
#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.


import argparse
import pathlib
import re

import jinja2


_CHAPTER_DESCRIPTIONS = {
    "1": "Executable Commands",
    "5": "File Formats & Conventions",
    "7": "Miscellaneous",
}


def _get_args():
    pars = argparse.ArgumentParser()
    for arg in [{
            "flags": ["--src"],
            "required": True,
            "type": pathlib.Path,
    }, {
            "flags": ["--dst"],
            "required": True,
            "type": pathlib.Path,
    }, {
            "flags": ["--man-dir"],
            "required": True,
            "type": pathlib.Path,
    }]:
        flags = arg.pop("flags")
        pars.add_argument(*flags, **arg)
    return pars.parse_args()


def get_metadata(man):
    pat = re.compile(r"^litani (?P<name>[^\s]+)\s+\-\s+(?P<description>.+)")
    with open(man) as handle:
        for line in handle:
            m = pat.match(line)
            if m:
                d = m["description"]
                description = d[0].lower() + d[1:]

                # scdoc inserts these to avoid line breaks
                name = re.sub(r"\&", "", m["name"])
                return {
                    "name": name,
                    "description": description,
                }
    raise UserWarning(
        f"Could not extract name and description from manual {man}")


def _add_mans(man_dir, mans_by_chapter):
    for man in man_dir.iterdir():
        if man.name == "litani.7":
            continue
        chapter = man.suffix[-1]
        mans_by_chapter[chapter].append(get_metadata(man))
    for _, mans in mans_by_chapter.items():
        mans.sort(key=(lambda m: m["name"]))


def main():
    args = _get_args()
    mans_by_chapter = {chapter: [] for chapter in _CHAPTER_DESCRIPTIONS}

    _add_mans(args.man_dir, mans_by_chapter)

    chapters = []
    for num, mans in mans_by_chapter.items():
        chapters.append({
            "name": f"Chapter {num}: {_CHAPTER_DESCRIPTIONS[num]}",
            "mans": mans
        })
    chapters.sort(key=(lambda c: c["name"]))

    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader(str(args.src.parent)),
        autoescape=jinja2.select_autoescape(
            enabled_extensions=("html"),
            default_for_string=True))
    templ = env.get_template(args.src.name)
    page = templ.render(chapters=chapters)

    with open(args.dst, "w") as handle:
        print(page, file=handle)


if __name__ == "__main__":
    main()
